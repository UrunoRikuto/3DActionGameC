#pragma once
#include "DirectXTex/DirectXTex.h"
#include <memory>

class Collision
{
public:
	enum Type
	{
		eNone,
		eBox,
		eSphere,
		ePlane,
		eRay,
		eLine,
		ePoint,
		eTriangle
	};

	enum class Tag
	{
		// すべて
		All = -1,
		//タグなし
		None = 0,
		// プレイヤー
		Player,
		// ターゲットNPC
		TargetNpc,
		// フィールド
		Field,
		// 頭
		Head,
		// 体
		Body,
		// 足
		Foot,
		// レイキャスト
		RayCast,
	};

	//--- 当たり判定の形状 
	struct Box	// 四角 
	{
		DirectX::XMFLOAT3  center;  // 中心座標 
		DirectX::XMFLOAT3  size;	// サイズ
	};

	struct Sphere	// 球 
	{
		DirectX::XMFLOAT3  center;  // 中心座標 
		float			   radius;  // 半径 
	};

	struct Plane	// 平面
	{
		DirectX::XMFLOAT3  pos;		// 平面上の一点 
		DirectX::XMFLOAT3  normal;	// 平面の法線
	};

	struct Ray	// 無限の直線
	{
		DirectX::XMFLOAT3 origin;	// 始点
		DirectX::XMFLOAT3 dir;		// レイの向き
	};

	struct Line	// 線分
	{
		DirectX::XMFLOAT3 start;	// 線分の始点
		DirectX::XMFLOAT3 end;		// 線分の終点
	};

	struct Point // 点
	{
		DirectX::XMFLOAT3 pos;	// 座標
	};

	struct Triangle // 三角形
	{
		DirectX::XMFLOAT3 point[3];	// 各頂点
	};

	//--- 当たり判定の統合情報
	struct Info
	{
		Type type;					// 当たり判定の種類
		std::vector<Tag> tag;
		union
		{
			Box box;
			Sphere sphere;
			Plane plane;
			Ray ray;
			Line line;
			Point point;
			Triangle triangle;
		};

	};

	//--- 当たり判定の結果 
	struct Result
	{
		bool isHit;					// 当たったかどうか 
		DirectX::XMFLOAT3  point;	// ヒット位置 
		DirectX::XMFLOAT3  normal;	// ヒット平面 
		Info other;					// 当たり判定オブジェクト]
		float u;					// バリセン座標u
		float v;					// バリセン座標v
		float t;					// 始点から交点までの距離
	};

	// 2D
	enum Type2D
	{
		eSquare,
		eCircle
	};

	struct Square	// 短形
	{
		DirectX::XMFLOAT2 pos;
		DirectX::XMFLOAT2 size;
	};

	struct Circle	// 円型
	{
		DirectX::XMFLOAT2 pos;
		float radius;
	};

	//--- 当たり判定の統合情報
	struct Info2D
	{
		Type2D type;
		Square square;
		Circle circle;
	};

	//--- 2D当たり判定の結果 
	struct Result2D 
	{
		bool isHit;	// 当たったかどうか 
		DirectX::XMFLOAT2 posAtoB;
		DirectX::XMFLOAT2 posBtoA;
		DirectX::XMFLOAT2 distance;
	};
public:
	// Info型での当たり判定
	static Result Hit(Info a, Info b);
	// 四角同士の当たり判定
	static Result Hit(Box a, Box b);
	// 球同士での当たり判定
	static Result Hit(Sphere a, Sphere b);
	static Result Hit(Plane plane, Line line);
	static Result Hit(Plane plane, Ray ray, float lenght);
	static Result Hit(Point point, Triangle triangle);
	static Result Hit(Ray ray, Triangle triangle);
	static Result Hit(Line line, Triangle triangle);
	static Result2D Hit2D(Info2D a, Info2D b);
	static Result2D Hit2D(Square a,Square b);
	static Result2D Hit2D(Circle a, Circle b);
	static void DrawCollision(Collision::Info collision);
};

// 当たり判定のチェック情報
struct CollisionCheckInfo
{
	// チェックする基準
	Collision::Info SelfInfo;
	// チェックする対象
	std::vector<Collision::Info> TargetInfo;
};