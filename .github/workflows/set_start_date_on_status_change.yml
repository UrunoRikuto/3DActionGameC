name: Set Start Date When Status is In Progress

on:
  schedule:
    - cron: '*/15 * * * *' # 15ÂàÜ„Åî„Å®„Å´ÂÆüË°å
  workflow_dispatch: # ÊâãÂãïÂÆüË°å„ÇÇÂèØËÉΩ

jobs:
  update-start-date:
    runs-on: ubuntu-latest
    steps:
      - name: Set Start Date on Status Change
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            const projectNumber = 7;
            const statusName = "ÈÄ≤Ë°å‰∏≠";
            const startDateFieldName = "Âèñ„ÇäÊéõ„Åã„ÇäÊó•";

            // „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÂèñÂæó
            const projects = await github.graphql(`
              query {
                viewer {
                  projectsV2(first: 10) {
                    nodes {
                      id
                      number
                      title
                    }
                  }
                }
              }
            `);

            const project = projects.viewer.projectsV2.nodes.find(p => p.number === projectNumber);
            if (!project) throw new Error('Project not found');
            const projectId = project.id;
            console.log('üìå Project ID:', projectId);

            // „Ç¢„Ç§„ÉÜ„É†Ôºã„Éï„Ç£„Éº„É´„ÉâÂÄ§ÂèñÂæó
            const items = await github.graphql(`
              query($projectId: ID!) {
                node(id: $projectId) {
                  ... on ProjectV2 {
                    items(first: 100) {
                      nodes {
                        id
                        fieldValues(first: 20) {
                          nodes {
                            ... on ProjectV2ItemFieldTextValue {
                              field {
                                ... on ProjectV2FieldCommon {
                                  name
                                  id
                                }
                              }
                              text
                            }
                            ... on ProjectV2ItemFieldDateValue {
                              field {
                                ... on ProjectV2FieldCommon {
                                  name
                                  id
                                }
                              }
                              date
                            }
                            ... on ProjectV2ItemFieldSingleSelectValue {
                              field {
                                ... on ProjectV2FieldCommon {
                                  name
                                  id
                                }
                              }
                              name
                            }
                          }
                        }
                      }
                    }
                    fields(first: 20) {
                      nodes {
                        ... on ProjectV2FieldCommon {
                          id
                          name
                        }
                      }
                    }
                  }
                }
              }
            `, { projectId });

            // „Éï„Ç£„Éº„É´„ÉâID„Éû„ÉÉ„ÉóÂåñ
            const fieldMap = {};
            for (const field of items.node.fields.nodes) {
              fieldMap[field.name] = field.id;
            }

            const startDateFieldId = fieldMap[startDateFieldName];
            console.log('üìå Start Date Field ID:', startDateFieldId);

            const today = new Date().toISOString().split('T')[0];
            console.log('üìÜ Today:', today);

            for (const item of items.node.items.nodes) {
              let isInProgress = false;
              let alreadySet = false;

              for (const field of item.fieldValues.nodes) {
                const fieldName = field?.field?.name;

                if (fieldName === statusName && field?.name === statusName) {
                  isInProgress = true;
                }
                if (fieldName === startDateFieldName && field?.date) {
                  alreadySet = true;
                }
              }

              if (isInProgress && !alreadySet) {
                console.log(`‚è≥ Updating item ${item.id} with date ${today}`);

                const response = await github.graphql(`
                  mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: Date!) {
                    updateProjectV2ItemFieldValue(input: {
                      projectId: $projectId,
                      itemId: $itemId,
                      fieldId: $fieldId,
                      value: {
                        date: $value
                      }
                    }) {
                      projectV2Item {
                        id
                      }
                    }
                  }
                `, {
                  projectId,
                  itemId: item.id,
                  fieldId: startDateFieldId,
                  value: today
                });

                console.log('‚úÖ Mutation response:', JSON.stringify(response, null, 2));
              } else {
                console.log(`üö´ Skipping item ${item.id} | isInProgress: ${isInProgress}, alreadySet: ${alreadySet}`);
              }
            }
